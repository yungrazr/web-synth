{"version":3,"sources":["components/Audio.js","components/Oscillator.js","components/Delay.js","components/Filter.js","components/Reverb.js","components/Visualiser.js","components/AudioAnalyser.js","components/MidiInputSelector.js","components/MasterVolume.js","components/Notes.js","components/PianoRoll.js","App.js","index.js"],"names":["Audio","context","window","AudioContext","webkitAudioContext","masterGainNode","createGain","filterGainNode","Oscillator","oscNum","play","useState","oscillatorNodes","setOscillatorNodes","useEffect","oscillators","addOscillatorNode","oscillatorGainNode","gain","setValueAtTime","currentTime","connect","oscillatorNode","createOscillator","frequency","detune","start","oscillatorNodeValues","note","playing","value","type","push","undefined","length","playNote","stopNote","nodes","index","node","error","console","log","playOscillator","selectedOscillatorNode","disconnect","stopOscillator","className","onChange","e","oscillatorsCopy","unlockDistance","min","max","preciseMode","rotateDegrees","Math","round","checkType","Delay","delay","setDelay","feedback","setFeedback","filter","setFilter","offOn","setOffOn","delayNode","createDelay","delayTime","feedbackNode","filterNode","createBiquadFilter","filterNodeValues","feedbackNodeValues","initiateDelay","newDelay","toFixed","newFeedback","newFilter","style","cursor","onClick","destination","Filter","Q","initiateFilter","newFreq","select","Reverb","require","reverb","setReverb","reverbNode","time","wet","dry","filterType","cutoff","reverbValues","decay","initiateReverb","newAmount","Visualiser","audioData","canvasRef","useRef","canvas","current","height","width","getContext","x","sliceWidth","lineWidth","strokeStyle","clearRect","beginPath","moveTo","y","lineTo","stroke","draw","ref","AudioAnalyser","analyser","Uint8Array","setAudioData","tick","bufferLength","frequencyBinCount","dataArray","getByteTimeDomainData","requestAnimationFrame","createAnalyser","fftSize","initiateVisualiser","MidiInputSelector","setPlayNote","onKeyDown","midiInputDevices","setMidiInputDevices","midiError","setMidiError","activeMidiDevice","setActiveMidiDevice","changed","setChanged","WebMidi","enable","err","addListener","_handleConnection","removeListener","inputs","useCallback","port","midiNoteOn","number","midiNoteOff","target","selectedDevice","activeDevice","parseInt","name","id","map","item","MasterVolume","masterGainValue","setMasterGainValue","notes","key","midiNumber","noteFrequencies","Map","PianoRoll","firstNote","MidiNumbers","fromNote","lastNote","noteRange","first","last","keyboardShortcuts","App","setStart","get","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7c6ae054.chunk.js","sourcesContent":["class Audio {\r\n  static context = new (window.AudioContext || window.webkitAudioContext)();\r\n\r\n  static masterGainNode = Audio.context.createGain();\r\n\r\n  static filterGainNode = Audio.context.createGain();\r\n}\r\n\r\nexport default Audio;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"../styles/Oscillator.scss\";\r\nimport Audio from \"./Audio\";\r\nimport { Knob } from \"react-rotary-knob\";\r\n\r\nconst Oscillator = ({ oscNum, play }) => {\r\n  // initialize state for OscillatorNodes\r\n  const [oscillatorNodes, setOscillatorNodes] = useState([]);\r\n\r\n  // initialize Oscillators on first render\r\n  useEffect(() => {\r\n    const oscillators = [];\r\n    const addOscillatorNode = () => {\r\n      // Create a GainNode for the oscillator, set it to 0 volume and connect it to filter\r\n      const oscillatorGainNode = Audio.context.createGain();\r\n      oscillatorGainNode.gain.setValueAtTime(0.3, Audio.context.currentTime);\r\n      oscillatorGainNode.connect(Audio.filterGainNode);\r\n\r\n      // Create OscillatorNode, connect it to its GainNode, and make it start playing.\r\n      const oscillatorNode = Audio.context.createOscillator();\r\n      oscillatorNode.frequency.setValueAtTime(262, Audio.context.currentTime);\r\n      oscillatorNode.detune.setValueAtTime(0, Audio.context.currentTime);\r\n      // oscillatorNode.connect(oscillatorGainNode)\r\n      oscillatorNode.start();\r\n\r\n      // Store the nodes along with their values in state.\r\n      const oscillatorNodeValues = {\r\n        note: null,\r\n        playing: false,\r\n        oscillatorNode: oscillatorNode,\r\n        oscillatorGainNode: oscillatorGainNode,\r\n        frequency: oscillatorNode.frequency.value,\r\n        detune: oscillatorNode.detune.value,\r\n        type: oscillatorNode.type,\r\n        gain: 30,\r\n      };\r\n      oscillators.push(oscillatorNodeValues);\r\n    };\r\n    addOscillatorNode();\r\n    addOscillatorNode();\r\n    addOscillatorNode();\r\n    addOscillatorNode();\r\n    addOscillatorNode();\r\n    addOscillatorNode();\r\n    setOscillatorNodes(oscillators);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // eslint-disable-next-line no-empty\r\n    if (oscillatorNodes === undefined || oscillatorNodes.length === 0) {\r\n    } else {\r\n      if (play) {\r\n        if (play.playNote != null && play.stopNote == null) {\r\n          playOscillator(play.frequency, play.playNote);\r\n          return;\r\n        }\r\n        if (play.stopNote != null && play.playNote == null) {\r\n          stopOscillator(play.stopNote);\r\n        }\r\n      }\r\n    }\r\n  }, [play]);\r\n\r\n  function playOscillator(frequency, note) {\r\n    const nodes = [...oscillatorNodes];\r\n    for (const index in nodes) {\r\n      const node = { ...nodes[index] };\r\n      if (node.note == null) {\r\n        node.playing = true;\r\n        node.note = note;\r\n        node.frequency = frequency;\r\n        node.oscillatorNode.frequency.setValueAtTime(\r\n          frequency,\r\n          Audio.context.currentTime\r\n        );\r\n        try {\r\n          node.oscillatorNode.connect(node.oscillatorGainNode);\r\n          nodes[index] = node;\r\n        } catch (error) {\r\n          console.log(\"Playing Osc\" + error);\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    setOscillatorNodes([...nodes]);\r\n  }\r\n\r\n  function stopOscillator(note) {\r\n    for (const index in oscillatorNodes) {\r\n      const selectedOscillatorNode = oscillatorNodes;\r\n      if (selectedOscillatorNode[index].note === note) {\r\n        selectedOscillatorNode[index].note = null;\r\n        selectedOscillatorNode[index].playing = false;\r\n        try {\r\n          oscillatorNodes[index].oscillatorNode.disconnect(\r\n            oscillatorNodes[index].oscillatorGainNode\r\n          );\r\n          setOscillatorNodes(selectedOscillatorNode);\r\n        } catch (error) {\r\n          console.log(\"Stopped osc\" + error);\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  const updateSelectedOscillatorTune = (e) => {\r\n    // update selected OscillatorNode to the selected tune\r\n    const oscillatorsCopy = [];\r\n    for (const index in oscillatorNodes) {\r\n      const selectedOscillatorNode = oscillatorNodes[index];\r\n      // set the tune of the OscillatorNode\r\n      selectedOscillatorNode.oscillatorNode.detune.setValueAtTime(\r\n        e,\r\n        Audio.context.currentTime\r\n      );\r\n      // set the value stored in state for the tune\r\n      selectedOscillatorNode.detune = e;\r\n      oscillatorsCopy.push(selectedOscillatorNode);\r\n    }\r\n    setOscillatorNodes(oscillatorsCopy);\r\n  };\r\n\r\n  const updateSelectedOscillatorVolume = (e) => {\r\n    // update selected OscillatorNode to the selected frequency\r\n    const oscillatorsCopy = [];\r\n    for (const index in oscillatorNodes) {\r\n      const selectedOscillatorNode = oscillatorNodes[index];\r\n      // set the gain of the OscillatorNode's GainNode\r\n      selectedOscillatorNode.oscillatorGainNode.gain.setValueAtTime(\r\n        Math.round(e) / 100,\r\n        Audio.context.currentTime\r\n      );\r\n      // set the value stored in state for the gain\r\n      selectedOscillatorNode.gain = Math.round(e);\r\n      oscillatorsCopy.push(selectedOscillatorNode);\r\n    }\r\n    setOscillatorNodes(oscillatorsCopy);\r\n  };\r\n\r\n  const updateSelectedOscillatorType = (e) => {\r\n    const type = Math.round(e);\r\n    // update selected OscillatorNode to the selected frequency\r\n    const oscillatorsCopy = [];\r\n    for (const index in oscillatorNodes) {\r\n      const selectedOscillatorNode = oscillatorNodes[index];\r\n      // set the type of the OscillatorNode\r\n      switch (type) {\r\n        case 1:\r\n          selectedOscillatorNode.oscillatorNode.type = \"sine\";\r\n          selectedOscillatorNode.type = \"sine\";\r\n          break;\r\n        case 2:\r\n          selectedOscillatorNode.oscillatorNode.type = \"sawtooth\";\r\n          selectedOscillatorNode.type = \"sawtooth\";\r\n          break;\r\n        case 3:\r\n          selectedOscillatorNode.oscillatorNode.type = \"square\";\r\n          selectedOscillatorNode.type = \"square\";\r\n          break;\r\n        case 4:\r\n          selectedOscillatorNode.oscillatorNode.type = \"triangle\";\r\n          selectedOscillatorNode.type = \"triangle\";\r\n          break;\r\n        default:\r\n          selectedOscillatorNode.oscillatorNode.type = \"sine\";\r\n          selectedOscillatorNode.type = \"sine\";\r\n        // code block\r\n      }\r\n      oscillatorsCopy.push(selectedOscillatorNode);\r\n    }\r\n    setOscillatorNodes(oscillatorsCopy);\r\n  };\r\n\r\n  const checkType = () => {\r\n    switch (oscillatorNodes[0].type) {\r\n      case \"sine\":\r\n        return 1;\r\n      case \"sawtooth\":\r\n        return 2;\r\n      case \"square\":\r\n        return 3;\r\n      case \"triangle\":\r\n        return 4;\r\n      default:\r\n        return 1;\r\n      // code block\r\n    }\r\n  };\r\n\r\n  if (oscillatorNodes === undefined || oscillatorNodes.length === 0) {\r\n    return null;\r\n  } else {\r\n    return (\r\n      <div className=\"oscillator-container\">\r\n        <h1 className={\"oscillator-title\"}>OSC {oscNum}</h1>\r\n\r\n        {/* Set the value of .frequency element to be the frequency of the selected oscillator\r\n            and add onChange handler to change the frequency of selectedOscillatorNode */}\r\n        <div className=\"oscillator-knob-container\">\r\n          <h3 className={\"oscillator-title-small\"}>TUNE</h3>\r\n          <Knob\r\n            onChange={updateSelectedOscillatorTune}\r\n            unlockDistance={10}\r\n            min={-500}\r\n            max={500}\r\n            preciseMode={true}\r\n            rotateDegrees={180}\r\n            value={oscillatorNodes[0].detune}\r\n          />\r\n          <p>{Math.round(oscillatorNodes[0].detune)} cent</p>\r\n        </div>\r\n\r\n        {/* Set the value of .wave-type element to be the type of the selected oscillator\r\n            and add onChange handler to change the type of selectedOscillatorNode */}\r\n        <div className=\"oscillator-knob-container\">\r\n          <h3 className={\"oscillator-title-small\"}>TYPE</h3>\r\n          <Knob\r\n            onChange={updateSelectedOscillatorType}\r\n            unlockDistance={10}\r\n            preciseMode={true}\r\n            min={1}\r\n            max={5}\r\n            rotateDegrees={180}\r\n            value={checkType()}\r\n          />\r\n          <p>{oscillatorNodes[0].type}</p>\r\n        </div>\r\n\r\n        <div className=\"oscillator-knob-container\">\r\n          <h3 className={\"oscillator-title-small\"}>MIX</h3>\r\n          {/* Set the value of .oscillator-volume element to be the gain value of the selected oscillator's GainNode\r\n                and add onChange handler to change the gain of selectedOscillatorNode */}\r\n          <Knob\r\n            onChange={updateSelectedOscillatorVolume}\r\n            unlockDistance={10}\r\n            min={0}\r\n            max={100}\r\n            preciseMode={true}\r\n            rotateDegrees={225}\r\n            value={oscillatorNodes[0].gain}\r\n          />\r\n          <p>{Math.round(oscillatorNodes[0].gain)}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\nexport default Oscillator;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"../styles/Oscillator.scss\";\r\nimport Audio from \"./Audio\";\r\nimport { Knob } from \"react-rotary-knob\";\r\n\r\nconst Delay = () => {\r\n  const [delay, setDelay] = useState();\r\n  const [feedback, setFeedback] = useState();\r\n  const [filter, setFilter] = useState();\r\n  const [offOn, setOffOn] = useState(false);\r\n\r\n  // Initialise delay node and set default values\r\n  useEffect(() => {\r\n    const initiateDelay = () => {\r\n      const delayNode = Audio.context.createDelay();\r\n      delayNode.delayTime.setValueAtTime(0.15, Audio.context.currentTime);\r\n\r\n      const feedbackNode = Audio.context.createGain();\r\n      feedbackNode.gain.setValueAtTime(0.6, Audio.context.currentTime);\r\n\r\n      const filterNode = Audio.context.createBiquadFilter();\r\n      filterNode.frequency.setValueAtTime(1000, Audio.context.currentTime);\r\n\r\n      delayNode.connect(feedbackNode);\r\n      feedbackNode.connect(filterNode);\r\n      filterNode.connect(delayNode);\r\n\r\n      Audio.masterGainNode.connect(delayNode);\r\n\r\n      const delayNodeValues = {\r\n        delayTime: 0.15,\r\n        delayNode: delayNode,\r\n      };\r\n      const filterNodeValues = {\r\n        frequency: 1000,\r\n        filterNode: filterNode,\r\n      };\r\n      const feedbackNodeValues = {\r\n        gain: 0.6,\r\n        feedbackNode: feedbackNode,\r\n      };\r\n\r\n      setDelay(delayNodeValues);\r\n      setFeedback(feedbackNodeValues);\r\n      setFilter(filterNodeValues);\r\n    };\r\n    initiateDelay();\r\n  }, []);\r\n\r\n  const updateDelayTime = (e) => {\r\n    const newDelay = { ...delay };\r\n    newDelay.delayNode.delayTime.setValueAtTime(e, Audio.context.currentTime);\r\n    newDelay.delayTime = e;\r\n    setDelay(newDelay);\r\n  };\r\n\r\n  const updateDelayFeedback = (e) => {\r\n    const newFeedback = { ...feedback };\r\n    newFeedback.gain = e;\r\n    newFeedback.feedbackNode.gain.setValueAtTime(e, Audio.context.currentTime);\r\n    setFeedback(newFeedback);\r\n  };\r\n\r\n  const updateDelayCutoffFreq = (e) => {\r\n    const newFilter = { ...filter };\r\n    newFilter.frequency = e;\r\n    newFilter.filterNode.frequency.setValueAtTime(e, Audio.context.currentTime);\r\n    setFilter(newFilter);\r\n  };\r\n\r\n  const switchOnOffDelay = () => {\r\n    if (offOn) {\r\n      setOffOn(false);\r\n      delay.delayNode.disconnect(Audio.context.destination);\r\n    } else {\r\n      setOffOn(true);\r\n      delay.delayNode.connect(Audio.context.destination);\r\n    }\r\n  };\r\n\r\n  if (delay && filter && feedback) {\r\n    return (\r\n      <div className=\"oscillator-container\">\r\n        <h1 className=\"oscillator-title\">DELAY</h1>\r\n\r\n        {/* Set the delay time value */}\r\n        <div className=\"oscillator-knob-container\">\r\n          <h3 className={\"oscillator-title-small\"}>TIME</h3>\r\n          <Knob\r\n            onChange={updateDelayTime}\r\n            unlockDistance={10}\r\n            min={0}\r\n            max={1}\r\n            preciseMode={true}\r\n            rotateDegrees={180}\r\n            value={delay.delayTime}\r\n          />\r\n          <p>{delay.delayTime.toFixed(2)}sec</p>\r\n        </div>\r\n\r\n        {/* Set the feedback value of the Delay */}\r\n        <div className=\"oscillator-knob-container\">\r\n          <h3 className={\"oscillator-title-small\"}>FEEDBACK</h3>\r\n          <Knob\r\n            onChange={updateDelayFeedback}\r\n            unlockDistance={10}\r\n            min={0}\r\n            max={0.95}\r\n            preciseMode={true}\r\n            rotateDegrees={180}\r\n            value={feedback.gain}\r\n          />\r\n          <p>{feedback.gain.toFixed(2)}</p>\r\n        </div>\r\n        {/* Set the cutoff frequency value of the Delay */}\r\n        <div className=\"oscillator-knob-container\">\r\n          <h3 className={\"oscillator-title-small\"}>CUTOFF</h3>\r\n          <Knob\r\n            onChange={updateDelayCutoffFreq}\r\n            unlockDistance={10}\r\n            preciseMode={true}\r\n            min={0}\r\n            max={4000}\r\n            rotateDegrees={180}\r\n            value={filter.frequency}\r\n          />\r\n          <p>{Math.round(filter.frequency)}hz</p>\r\n        </div>\r\n        <h3\r\n          style={{ cursor: \"pointer\" }}\r\n          className=\"oscillator-title-small\"\r\n          onClick={switchOnOffDelay}\r\n        >\r\n          {offOn ? \"Turn Off\" : \"Turn On\"}\r\n        </h3>\r\n      </div>\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\nexport default Delay;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"../styles/Oscillator.scss\";\r\nimport Audio from \"./Audio\";\r\nimport { Knob } from \"react-rotary-knob\";\r\n\r\nconst Filter = () => {\r\n  const [filter, setFilter] = useState();\r\n\r\n  // Initialise filter node and set default values\r\n  useEffect(() => {\r\n    const initiateFilter = () => {\r\n      const filterNode = Audio.context.createBiquadFilter();\r\n      Audio.filterGainNode.gain.setValueAtTime(0.5, Audio.context.currentTime);\r\n      filterNode.frequency.value = 1000;\r\n      filterNode.type = \"lowpass\";\r\n      filterNode.Q.value = 1;\r\n      Audio.filterGainNode.connect(filterNode);\r\n      filterNode.connect(Audio.masterGainNode);\r\n\r\n      const filterNodeValues = {\r\n        frequency: filterNode.frequency.value,\r\n        type: filterNode.type,\r\n        Q: filterNode.Q.value,\r\n        filterNode: filterNode,\r\n      };\r\n      setFilter(filterNodeValues);\r\n    };\r\n    initiateFilter();\r\n  }, []);\r\n\r\n  const updateFrequency = (e) => {\r\n    const newFreq = { ...filter };\r\n    newFreq.filterNode.frequency.value = e;\r\n    newFreq.frequency = e;\r\n    setFilter(newFreq);\r\n  };\r\n\r\n  const updateQ = (e) => {\r\n    console.log(filter);\r\n    const newFreq = { ...filter };\r\n    newFreq.filterNode.Q.value = e;\r\n    newFreq.Q = e;\r\n    setFilter(newFreq);\r\n  };\r\n\r\n  const updateType = (e) => {\r\n    const select = Math.round(e);\r\n    const newFreq = { ...filter };\r\n    switch (select) {\r\n      case 1:\r\n        newFreq.filterNode.type = \"lowpass\";\r\n        newFreq.type = \"lowpass\";\r\n        break;\r\n      case 2:\r\n        newFreq.filterNode.type = \"highpass\";\r\n        newFreq.type = \"highpass\";\r\n        break;\r\n      case 3:\r\n        newFreq.filterNode.type = \"bandpass\";\r\n        newFreq.type = \"bandpass\";\r\n        break;\r\n      default:\r\n        newFreq.filterNode.type = \"lowpass\";\r\n        newFreq.type = \"lowpass\";\r\n    }\r\n    setFilter(newFreq);\r\n  };\r\n\r\n  const checkType = () => {\r\n    switch (filter.type) {\r\n      case \"lowpass\":\r\n        return 1;\r\n      case \"highpass\":\r\n        return 2;\r\n      case \"bandpass\":\r\n        return 3;\r\n      default:\r\n        return 1;\r\n    }\r\n  };\r\n\r\n  if (filter === undefined) {\r\n    return null;\r\n  } else {\r\n    return (\r\n      <div className=\"oscillator-container\">\r\n        <h1 className=\"oscillator-title\">FILTER</h1>\r\n\r\n        {/* Set the cutoff frequency of the filter */}\r\n        <div className=\"oscillator-knob-container\">\r\n          <h3 className={\"oscillator-title-small\"}>CUTOFF</h3>\r\n          <Knob\r\n            onChange={updateFrequency}\r\n            unlockDistance={10}\r\n            min={0}\r\n            max={4000}\r\n            preciseMode={true}\r\n            rotateDegrees={180}\r\n            value={filter.frequency}\r\n          />\r\n          <p>{Math.round(filter.frequency)}hz</p>\r\n        </div>\r\n\r\n        {/* Set the Q value of the filter */}\r\n        <div className=\"oscillator-knob-container\">\r\n          <h3 className={\"oscillator-title-small\"}>RES</h3>\r\n          <Knob\r\n            onChange={updateQ}\r\n            unlockDistance={10}\r\n            min={0.01}\r\n            max={15}\r\n            preciseMode={true}\r\n            rotateDegrees={180}\r\n            value={filter.Q}\r\n          />\r\n          <p>{filter.Q.toFixed(2)}</p>\r\n        </div>\r\n\r\n        <div className=\"oscillator-knob-container\">\r\n          <h3 className={\"oscillator-title-small\"}>TYPE</h3>\r\n          {/* Set the type of the filter */}\r\n          <Knob\r\n            onChange={updateType}\r\n            unlockDistance={10}\r\n            preciseMode={true}\r\n            min={1}\r\n            max={4}\r\n            rotateDegrees={180}\r\n            value={checkType()}\r\n          />\r\n          <p>{filter.type}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\nexport default Filter;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"../styles/Oscillator.scss\";\r\nimport Audio from \"./Audio\";\r\nimport { Knob } from \"react-rotary-knob\";\r\n\r\nconst Reverb = () => {\r\n  const Reverb = require(\"soundbank-reverb\");\r\n  const [reverb, setReverb] = useState();\r\n  const [offOn, setOffOn] = useState(false);\r\n\r\n  // Initialise reverb node and set default values\r\n  useEffect(() => {\r\n    const initiateReverb = () => {\r\n      const reverbNode = Reverb(Audio.context);\r\n      reverbNode.time = 3; // Amount in seconds\r\n      reverbNode.wet.value = 0.5;\r\n      reverbNode.dry.value = 0;\r\n\r\n      reverbNode.filterType = \"highpass\";\r\n      reverbNode.cutoff.value = 200; // Amount in Hz\r\n      reverbNode.connect(Audio.masterGainNode);\r\n\r\n      const reverbValues = {\r\n        decay: reverbNode.time,\r\n        wet: reverbNode.wet.value,\r\n        dry: reverbNode.dry.value,\r\n        reverbNode: reverbNode,\r\n      };\r\n      setReverb(reverbValues);\r\n    };\r\n    initiateReverb();\r\n  }, []);\r\n\r\n  const updateWet = (e) => {\r\n    const newAmount = { ...reverb };\r\n    newAmount.reverbNode.wet.value = e;\r\n    newAmount.wet = e;\r\n    setReverb(newAmount);\r\n  };\r\n\r\n  const updateDecay = (e) => {\r\n    const newAmount = { ...reverb };\r\n    newAmount.reverbNode.time = e;\r\n    newAmount.decay = e;\r\n    setReverb(newAmount);\r\n  };\r\n\r\n  const switchOnOffReverb = () => {\r\n    if (offOn) {\r\n      setOffOn(false);\r\n      reverb.reverbNode.disconnect(Audio.context.destination);\r\n    } else {\r\n      setOffOn(true);\r\n      reverb.reverbNode.connect(Audio.context.destination);\r\n    }\r\n  };\r\n\r\n  if (reverb === undefined) {\r\n    return null;\r\n  } else {\r\n    return (\r\n      <div className=\"oscillator-container\">\r\n        <h1 className=\"oscillator-title\">REVERB</h1>\r\n\r\n        {/* Set the Decay value of the reverb */}\r\n        <div className=\"oscillator-knob-container\">\r\n          <h3 className={\"oscillator-title-small\"}>DECAY</h3>\r\n          <Knob\r\n            onChange={updateDecay}\r\n            unlockDistance={10}\r\n            min={0}\r\n            max={10}\r\n            preciseMode={true}\r\n            rotateDegrees={220}\r\n            value={reverb.decay}\r\n          />\r\n          <p>{Math.round(reverb.decay)}sec</p>\r\n        </div>\r\n\r\n        {/* Set the Wet value of the reverb */}\r\n        <div className=\"oscillator-knob-container\">\r\n          <h3 className={\"oscillator-title-small\"}>WET</h3>\r\n          <Knob\r\n            onChange={updateWet}\r\n            unlockDistance={10}\r\n            min={0}\r\n            max={1}\r\n            preciseMode={true}\r\n            rotateDegrees={220}\r\n            value={reverb.wet}\r\n          />\r\n          <p>{reverb.wet.toFixed(2)}</p>\r\n        </div>\r\n        <h3\r\n          style={{ cursor: \"pointer\" }}\r\n          className=\"oscillator-title-small\"\r\n          onClick={switchOnOffReverb}\r\n        >\r\n          {offOn ? \"Turn Off\" : \"Turn On\"}\r\n        </h3>\r\n      </div>\r\n    );\r\n  }\r\n};\r\nexport default Reverb;\r\n","/* eslint-disable react/prop-types */\r\nimport React, { useEffect, useRef } from \"react\";\r\nimport \"../styles/Visualiser.scss\";\r\n\r\nconst Visualiser = ({ audioData }) => {\r\n  const canvasRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    draw();\r\n  }, [audioData]);\r\n\r\n  function draw() {\r\n    const canvas = canvasRef.current;\r\n    const height = canvas.height;\r\n    const width = canvas.width;\r\n    const context = canvas.getContext(\"2d\");\r\n    let x = 0;\r\n    const sliceWidth = (width * 1.0) / audioData.length;\r\n\r\n    context.lineWidth = 2;\r\n    context.strokeStyle = \"#ffffff\";\r\n    context.clearRect(0, 0, width, height);\r\n\r\n    context.beginPath();\r\n    context.moveTo(0, height / 2);\r\n\r\n    for (const item of audioData) {\r\n      const y = (item / 255.0) * height;\r\n      context.lineTo(x, y);\r\n      x += sliceWidth;\r\n    }\r\n\r\n    context.lineTo(x, height / 2);\r\n    context.stroke();\r\n  }\r\n\r\n  return (\r\n    <canvas\r\n      className=\"visualiser\"\r\n      width=\"500px\"\r\n      height=\"500px\"\r\n      ref={canvasRef}\r\n    />\r\n  );\r\n};\r\nexport default Visualiser;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Audio from \"./Audio\";\r\nimport Visualiser from \"./Visualiser\";\r\n\r\nconst AudioAnalyser = () => {\r\n  const [audioData, setAudioData] = useState(new Uint8Array(0));\r\n  let analyser;\r\n\r\n  // Initialise reverb node and set default values\r\n  useEffect(() => {\r\n    const initiateVisualiser = () => {\r\n      analyser = Audio.context.createAnalyser();\r\n      Audio.masterGainNode.connect(analyser);\r\n\r\n      analyser.fftSize = 2048;\r\n      const bufferLength = analyser.frequencyBinCount;\r\n      const dataArray = new Uint8Array(bufferLength);\r\n      analyser.getByteTimeDomainData(dataArray);\r\n      // eslint-disable-next-line no-unused-vars\r\n      // const rafId = requestAnimationFrame(tick);\r\n    };\r\n    initiateVisualiser();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (analyser !== undefined) {\r\n      tick();\r\n    }\r\n  }, [audioData]);\r\n\r\n  function tick() {\r\n    const bufferLength = analyser.frequencyBinCount;\r\n    const dataArray = new Uint8Array(bufferLength);\r\n    analyser.getByteTimeDomainData(dataArray);\r\n    setAudioData(dataArray);\r\n    // eslint-disable-next-line no-unused-vars\r\n    const rafId = requestAnimationFrame(tick);\r\n  }\r\n\r\n  return <Visualiser audioData={audioData} />;\r\n};\r\nexport default AudioAnalyser;\r\n","import React, { useState, useCallback, useEffect } from \"react\";\r\nimport WebMidi from \"webmidi\";\r\n\r\nconst MidiInputSelector = ({ setPlayNote, onKeyDown }) => {\r\n  const [midiInputDevices, setMidiInputDevices] = useState([]);\r\n  const [midiError, setMidiError] = useState(null);\r\n  const [activeMidiDevice, setActiveMidiDevice] = useState(null);\r\n  const [changed, setChanged] = useState(null);\r\n\r\n  useEffect(() => {\r\n    WebMidi.enable((err) => {\r\n      if (err) {\r\n        setMidiError(err);\r\n      } else {\r\n        console.log(\"WebMidi enabled!\");\r\n        WebMidi.addListener(\"connected\", _handleConnection);\r\n        WebMidi.addListener(\"disconnected\", _handleConnection);\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      WebMidi.removeListener(\"connected\", _handleConnection);\r\n      WebMidi.removeListener(\"disconnected\", _handleConnection);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setMidiInputDevices(WebMidi.inputs);\r\n  }, [changed]);\r\n\r\n  const _handleConnection = useCallback((e) => {\r\n    if (e.port.type === \"input\") {\r\n      setChanged(e);\r\n    }\r\n  }, []);\r\n\r\n  const midiNoteOn = useCallback((e) => {\r\n    onKeyDown(e.note.number);\r\n  }, []);\r\n\r\n  const midiNoteOff = useCallback((e) => {\r\n    setPlayNote({ stopNote: e.note.number, playNote: null });\r\n  }, []);\r\n\r\n  const _handleOnChange = (e) => {\r\n    if (e.target.value === \"disable\") {\r\n      const selectedDevice = activeMidiDevice;\r\n      selectedDevice.removeListener(\"noteon\", \"all\", midiNoteOn);\r\n      selectedDevice.removeListener(\"noteoff\", \"all\", midiNoteOff);\r\n      setActiveMidiDevice(null);\r\n    } else {\r\n      if (activeMidiDevice != null) {\r\n        const activeDevice = activeMidiDevice;\r\n        activeDevice.removeListener(\"noteon\", \"all\", midiNoteOn);\r\n        activeDevice.removeListener(\"noteoff\", \"all\", midiNoteOff);\r\n      }\r\n      const selectedDevice = midiInputDevices[parseInt(e.target.value)];\r\n      selectedDevice.addListener(\"noteon\", \"all\", midiNoteOn);\r\n      selectedDevice.addListener(\"noteoff\", \"all\", midiNoteOff);\r\n      setActiveMidiDevice(selectedDevice);\r\n    }\r\n  };\r\n\r\n  if (midiError != null) {\r\n    return <p>MIDI Disabled</p>;\r\n  }\r\n\r\n  if (midiInputDevices.length > 0) {\r\n    return (\r\n      <>\r\n        <p>MIDI Input:</p>\r\n        <select\r\n          className=\"midiDeviceSelect\"\r\n          onChange={_handleOnChange}\r\n          name=\"midiDeviceSelect\"\r\n          id=\"midiDeviceSelect\"\r\n        >\r\n          <option value={\"disable\"}>Turn Off</option>\r\n          {midiInputDevices.map((item, index) => {\r\n            return (\r\n              <option key={item} value={index}>\r\n                {item.name}\r\n              </option>\r\n            );\r\n          })}\r\n        </select>\r\n      </>\r\n    );\r\n  } else {\r\n    return <p>No MIDI Devices connected</p>;\r\n  }\r\n};\r\nexport default MidiInputSelector;\r\n","/* eslint-disable react/prop-types */\r\nimport React from \"react\";\r\nimport { Knob } from \"react-rotary-knob\";\r\nimport Audio from \"./Audio\";\r\n\r\nconst MasterVolume = ({ masterGainValue, setMasterGainValue }) => {\r\n  const changeMasterVolume = (e) => {\r\n    setMasterGainValue(Math.round(e) / 100);\r\n    Audio.masterGainNode.gain.setValueAtTime(\r\n      Math.round(e) / 100,\r\n      Audio.context.currentTime\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"master-volume-container\">\r\n      <h1 className=\"oscillator-title\">MASTER VOL</h1>\r\n      <Knob\r\n        onChange={changeMasterVolume}\r\n        unlockDistance={10}\r\n        preciseMode={true}\r\n        min={0}\r\n        max={100}\r\n        rotateDegrees={225}\r\n        value={masterGainValue * 100}\r\n      />\r\n      <p>{Math.round(masterGainValue * 100)}</p>\r\n    </div>\r\n  );\r\n};\r\nexport default MasterVolume;\r\n","// key and corresponding midi note for that key\r\nexport const notes = [\r\n  { key: \"z\", midiNumber: 48 },\r\n  { key: \"s\", midiNumber: 49 },\r\n  { key: \"x\", midiNumber: 50 },\r\n  { key: \"d\", midiNumber: 51 },\r\n  { key: \"c\", midiNumber: 52 },\r\n  { key: \"v\", midiNumber: 53 },\r\n  { key: \"g\", midiNumber: 54 },\r\n  { key: \"b\", midiNumber: 55 },\r\n  { key: \"h\", midiNumber: 56 },\r\n  { key: \"n\", midiNumber: 57 },\r\n  { key: \"j\", midiNumber: 58 },\r\n  { key: \"m\", midiNumber: 59 },\r\n  { key: \"q\", midiNumber: 60 },\r\n  { key: \"2\", midiNumber: 61 },\r\n  { key: \"w\", midiNumber: 62 },\r\n  { key: \"3\", midiNumber: 63 },\r\n  { key: \"e\", midiNumber: 64 },\r\n  { key: \"r\", midiNumber: 65 },\r\n  { key: \"5\", midiNumber: 66 },\r\n  { key: \"t\", midiNumber: 67 },\r\n  { key: \"6\", midiNumber: 68 },\r\n  { key: \"y\", midiNumber: 69 },\r\n  { key: \"7\", midiNumber: 70 },\r\n  { key: \"u\", midiNumber: 71 },\r\n  { key: \"i\", midiNumber: 72 },\r\n];\r\n\r\n// [midiNumber, frequency]\r\nexport const noteFrequencies = new Map([\r\n  [12, 16.35],\r\n  [13, 17.32],\r\n  [14, 18.35],\r\n  [15, 19.45],\r\n  [16, 20.6],\r\n  [17, 21.83],\r\n  [18, 23.12],\r\n  [19, 24.5],\r\n  [20, 25.96],\r\n  [21, 27.5],\r\n  [22, 29.14],\r\n  [23, 30.87],\r\n  [24, 32.7],\r\n  [25, 34.65],\r\n  [26, 36.71],\r\n  [27, 38.89],\r\n  [28, 41.2],\r\n  [29, 43.65],\r\n  [30, 46.25],\r\n  [31, 49.0],\r\n  [32, 51.91],\r\n  [33, 55.0],\r\n  [34, 58.27],\r\n  [35, 61.74],\r\n  [36, 65.41],\r\n  [37, 69.3],\r\n  [38, 73.42],\r\n  [39, 77.78],\r\n  [40, 82.41],\r\n  [41, 87.31],\r\n  [42, 92.5],\r\n  [43, 98.0],\r\n  [44, 103.83],\r\n  [45, 110.0],\r\n  [46, 116.54],\r\n  [47, 123.47],\r\n  [48, 130.8],\r\n  [49, 138.6],\r\n  [50, 146.8],\r\n  [51, 155.6],\r\n  [52, 164.8],\r\n  [53, 174.61],\r\n  [54, 185],\r\n  [55, 196],\r\n  [56, 207.65],\r\n  [57, 220],\r\n  [58, 233.08],\r\n  [59, 246.9],\r\n  [60, 262],\r\n  [61, 277.2],\r\n  [62, 293.7],\r\n  [63, 311.2],\r\n  [64, 329.7],\r\n  [65, 349.3],\r\n  [66, 370.1],\r\n  [67, 392.1],\r\n  [68, 415.4],\r\n  [69, 440],\r\n  [70, 466.1],\r\n  [71, 493.88],\r\n  [72, 523.25],\r\n  [73, 554.37],\r\n  [74, 587.33],\r\n  [75, 622.25],\r\n  [76, 659.26],\r\n  [77, 698.46],\r\n  [78, 739.99],\r\n  [79, 783.99],\r\n  [80, 830.61],\r\n  [81, 880.0],\r\n  [82, 932.33],\r\n  [83, 987.77],\r\n  [84, 1046.5],\r\n  [85, 1108.73],\r\n  [86, 1174.66],\r\n  [87, 1244.51],\r\n  [88, 1318.51],\r\n  [89, 1396.91],\r\n  [90, 1479.98],\r\n  [91, 1567.98],\r\n  [92, 1661.22],\r\n  [93, 1760.0],\r\n  [94, 1864.66],\r\n  [95, 1975.53],\r\n  [96, 2093.0],\r\n  [97, 2217.46],\r\n  [98, 2349.32],\r\n  [99, 2489.02],\r\n  [100, 2637.02],\r\n  [101, 2793.83],\r\n  [102, 2959.96],\r\n  [103, 3135.96],\r\n  [104, 3322.44],\r\n  [105, 3520.0],\r\n  [106, 3729.31],\r\n  [107, 3951.07],\r\n  [108, 4186.01],\r\n]);\r\n","/* eslint-disable react/prop-types */\r\nimport React from \"react\";\r\n\r\nimport { notes } from \"./Notes\";\r\nimport { Piano, MidiNumbers } from \"react-piano\";\r\nimport \"react-piano/dist/styles.css\";\r\nimport \"../styles/CustomPianoStyles.scss\";\r\n\r\nconst PianoRoll = ({ onKeyDown, setPlayNote }) => {\r\n  const firstNote = MidiNumbers.fromNote(\"c3\");\r\n  const lastNote = MidiNumbers.fromNote(\"c5\");\r\n\r\n  return (\r\n    <div className=\"piano-container\">\r\n      <Piano\r\n        noteRange={{ first: firstNote, last: lastNote }}\r\n        playNote={(midiNumber) => {\r\n          onKeyDown(midiNumber);\r\n        }}\r\n        stopNote={(midiNumber) => {\r\n          setPlayNote({ stopNote: midiNumber, playNote: null });\r\n        }}\r\n        keyboardShortcuts={notes}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default PianoRoll;\r\n","import React, { useState } from \"react\";\r\nimport \"./styles/App.scss\";\r\nimport Audio from \"./components/Audio\";\r\nimport Oscillator from \"./components/Oscillator\";\r\nimport Delay from \"./components/Delay\";\r\nimport Filter from \"./components/Filter\";\r\nimport Reverb from \"./components/Reverb\";\r\nimport AudioAnalyser from \"./components/AudioAnalyser\";\r\nimport MidiInputSelector from \"./components/MidiInputSelector\";\r\nimport MasterVolume from \"./components/MasterVolume\";\r\nimport PianoRoll from \"./components/PianoRoll\";\r\nimport { noteFrequencies } from \"./components/Notes\";\r\n\r\nconst App = () => {\r\n  const [start, setStart] = useState(false);\r\n\r\n  // set state to represent initial value of masterGainNode\r\n  const [masterGainValue, setMasterGainValue] = useState(0.5);\r\n  const [playNote, setPlayNote] = useState({ playNote: null, stopNote: null });\r\n\r\n  const initAudio = () => {\r\n    setStart(true);\r\n    // Connect the masterGainNode to the audio context to allow it to output sound.\r\n    Audio.masterGainNode.connect(Audio.context.destination);\r\n    // Set masterGain Value to 0\r\n    Audio.masterGainNode.gain.setValueAtTime(0.5, Audio.context.currentTime);\r\n  };\r\n\r\n  const onKeyDown = (midiNumber) => {\r\n    setPlayNote({\r\n      playNote: midiNumber,\r\n      frequency: noteFrequencies.get(midiNumber),\r\n      stopNote: null,\r\n    });\r\n  };\r\n\r\n  if (start === false) {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"splash-screen\">\r\n          <h1>Web.Synth</h1>\r\n          <p style={{ cursor: \"pointer\" }} onClick={() => initAudio()}>\r\n            Click here to start\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className=\"Main\">\r\n        <div className=\"header\">\r\n          <p>Web.Synth v1.0</p>\r\n          <div className=\"header-item-container\">\r\n            <MidiInputSelector\r\n              onKeyDown={onKeyDown}\r\n              setPlayNote={setPlayNote}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"top-row\">\r\n          <Oscillator oscNum={1} play={playNote} />\r\n          <Oscillator oscNum={2} play={playNote} />\r\n          <Oscillator oscNum={3} play={playNote} />\r\n          <Filter />\r\n          <Delay />\r\n          <Reverb />\r\n          <MasterVolume\r\n            masterGainValue={masterGainValue}\r\n            setMasterGainValue={setMasterGainValue}\r\n          />\r\n        </div>\r\n        <div className=\"bottom-row\">\r\n          <PianoRoll setPlayNote={setPlayNote} onKeyDown={onKeyDown} />\r\n          <AudioAnalyser />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\nexport default App;\r\n","/* eslint-disable prettier/prettier */\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}