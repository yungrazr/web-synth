{"version":3,"sources":["components/Audio.js","components/Oscillator.js","components/Delay.js","components/Filter.js","components/Reverb.js","App.js","reportWebVitals.js","index.js"],"names":["Audio","context","window","AudioContext","webkitAudioContext","masterGainNode","createGain","Oscillator","oscNum","play","useState","oscillatorNodes","setOscillatorNodes","useEffect","oscillators","addOscillatorNode","oscillatorGainNode","gain","setValueAtTime","currentTime","connect","oscillatorNode","createOscillator","frequency","detune","start","oscillatorNodeValues","note","playing","value","type","push","undefined","length","playNote","stopNote","nodes","index","node","error","console","log","playOscillator","selectedOscillatorNode","disconnect","stopOscillator","className","onChange","e","oscillatorsCopy","unlockDistance","min","max","preciseMode","rotateDegrees","Math","round","checkType","Delay","delay","setDelay","feedback","setFeedback","filter","setFilter","offOn","setOffOn","delayNode","createDelay","delayTime","feedbackNode","filterNode","createBiquadFilter","filterNodeValues","feedbackNodeValues","initiateDelay","newDelay","toFixed","newFeedback","newFilter","onClick","destination","Filter","Q","initiateFilter","newFreq","select","Reverb","require","reverb","setReverb","reverbNode","time","wet","dry","filterType","cutoff","decay","initiateReverb","newAmount","App","setStart","firstNote","MidiNumbers","fromNote","lastNote","keyboardShortcuts","KeyboardShortcuts","create","keyboardConfig","HOME_ROW","noteFrequencies","Map","masterGainValue","setMasterGainValue","setPlayNote","changeMasterVolume","noteRange","first","last","midiNumber","get","onKeyDown","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.09974409.chunk.js","sourcesContent":["class Audio {\r\n    static context = new (window.AudioContext || window.webkitAudioContext)()\r\n\r\n    static masterGainNode = Audio.context.createGain()\r\n}\r\n\r\nexport default Audio","import React, { useState, useEffect } from 'react';\r\nimport './Oscillator.css';\r\nimport Audio from './Audio'\r\nimport { Knob } from \"react-rotary-knob\";\r\n\r\nconst Oscillator = ({ oscNum, play }) => {\r\n\r\n    // initialize state for OscillatorNodes\r\n    const [oscillatorNodes, setOscillatorNodes] = useState([])\r\n\r\n    // initialize masterGainNode on first render\r\n    useEffect(() => {\r\n        const oscillators = [];\r\n        const addOscillatorNode = () => {\r\n            // Create a GainNode for the oscillator, set it to 0 volume and connect it to masterGainNode\r\n            const oscillatorGainNode = Audio.context.createGain()\r\n            oscillatorGainNode.gain.setValueAtTime(0.3, Audio.context.currentTime)\r\n            oscillatorGainNode.connect(Audio.masterGainNode)\r\n\r\n            // Create OscillatorNode, connect it to its GainNode, and make it start playing.\r\n            const oscillatorNode = Audio.context.createOscillator()\r\n            oscillatorNode.frequency.setValueAtTime(262, Audio.context.currentTime);\r\n            oscillatorNode.detune.setValueAtTime(0, Audio.context.currentTime);\r\n            // oscillatorNode.connect(oscillatorGainNode)\r\n            oscillatorNode.start()\r\n\r\n            // Store the nodes along with their values in state.\r\n            // Note: When an oscillator is created, frequency is set to 440,\r\n            // and type is set to 'sine' by default.\r\n            const oscillatorNodeValues = {\r\n                note: null,\r\n                playing: false,\r\n                oscillatorNode: oscillatorNode,\r\n                oscillatorGainNode: oscillatorGainNode,\r\n                frequency: oscillatorNode.frequency.value,\r\n                detune: oscillatorNode.detune.value,\r\n                type: oscillatorNode.type,\r\n                gain: 30\r\n            }\r\n            oscillators.push(oscillatorNodeValues)\r\n        }\r\n        addOscillatorNode()\r\n        addOscillatorNode()\r\n        addOscillatorNode()\r\n        addOscillatorNode()\r\n        addOscillatorNode()\r\n        addOscillatorNode()\r\n        setOscillatorNodes(oscillators)\r\n        return;\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (oscillatorNodes === undefined || oscillatorNodes.length === 0) {\r\n        }\r\n        else {\r\n            if(play)\r\n            {\r\n                if(play.playNote!=null && play.stopNote==null){\r\n                    playOscillator(play.frequency, play.playNote)\r\n                    return;\r\n                }\r\n                if(play.stopNote!=null && play.playNote==null){\r\n                    stopOscillator(play.stopNote)\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n    }, [play])\r\n\r\n    function playOscillator(frequency, note) {\r\n        let nodes = [...oscillatorNodes]\r\n        for(const index in nodes)\r\n        {\r\n            let node = {...nodes[index]};\r\n            if(node.note == null) {\r\n                node.playing=true;\r\n                node.note=note;\r\n                node.frequency=frequency;\r\n                node.oscillatorNode.frequency.setValueAtTime(frequency, Audio.context.currentTime);\r\n                try {\r\n                    node.oscillatorNode.connect(node.oscillatorGainNode)\r\n                    nodes[index] = node;\r\n                } catch (error) {\r\n                    console.log(\"Playing Osc\"+ error)\r\n                }\r\n                break\r\n            }\r\n        }\r\n        setOscillatorNodes([...nodes])\r\n    }\r\n\r\n    function stopOscillator(note) {\r\n        for(const index in oscillatorNodes)\r\n        {\r\n            const selectedOscillatorNode = oscillatorNodes\r\n            if(selectedOscillatorNode[index].note === note) {\r\n                selectedOscillatorNode[index].note=null;\r\n                selectedOscillatorNode[index].playing=false;\r\n                try {\r\n                    oscillatorNodes[index].oscillatorNode.disconnect(oscillatorNodes[index].oscillatorGainNode)\r\n                    setOscillatorNodes(selectedOscillatorNode)\r\n                } catch (error) {\r\n                    console.log(\"Stopped osc\"+ error)\r\n                }\r\n                break\r\n            }\r\n        }\r\n    }\r\n\r\n    const updateSelectedOscillatorTune = (e) => {\r\n        //update selected OscillatorNode to the selected tune\r\n        const oscillatorsCopy = [];\r\n        for(const index in oscillatorNodes)\r\n        {\r\n            const selectedOscillatorNode = oscillatorNodes[index]\r\n            // set the tune of the OscillatorNode\r\n            selectedOscillatorNode.oscillatorNode.detune.setValueAtTime(e, Audio.context.currentTime);\r\n            // set the value stored in state for the tune\r\n            selectedOscillatorNode.detune = e\r\n            oscillatorsCopy.push(selectedOscillatorNode)\r\n        }\r\n        setOscillatorNodes(oscillatorsCopy)\r\n    }\r\n\r\n    // const updateSelectedOscillatorType = (e) => {\r\n    //     //update selected OscillatorNode to the selected frequency\r\n    //     const oscillatorsCopy = [];\r\n    //     for(const index in oscillatorNodes)\r\n    //     {\r\n    //         const selectedOscillatorNode = oscillatorNodes[index]\r\n    //         // set the type of the OscillatorNode\r\n    //         selectedOscillatorNode.oscillatorNode.type = e.target.value\r\n    //         // set the value stored in state for the type\r\n    //         selectedOscillatorNode.type = e.target.value\r\n    //         oscillatorsCopy.push(selectedOscillatorNode)\r\n    //     }\r\n    //     setOscillatorNodes(oscillatorsCopy)\r\n    // }\r\n\r\n    const updateSelectedOscillatorVolume = (e) => {\r\n        //update selected OscillatorNode to the selected frequency\r\n        const oscillatorsCopy = [];\r\n        for(const index in oscillatorNodes)\r\n        {\r\n            const selectedOscillatorNode = oscillatorNodes[index]\r\n            // set the gain of the OscillatorNode's GainNode\r\n            selectedOscillatorNode.oscillatorGainNode.gain.setValueAtTime(\r\n                Math.round(e) / 100, Audio.context.currentTime\r\n            )\r\n            // set the value stored in state for the gain\r\n            selectedOscillatorNode.gain = Math.round(e)\r\n            oscillatorsCopy.push(selectedOscillatorNode)\r\n        }\r\n        setOscillatorNodes(oscillatorsCopy)\r\n    }\r\n\r\n    const updateSelectedOscillatorType = (e) => {\r\n        let type = Math.round(e)\r\n        //update selected OscillatorNode to the selected frequency\r\n        const oscillatorsCopy = [];\r\n        for(const index in oscillatorNodes)\r\n        {\r\n            const selectedOscillatorNode = oscillatorNodes[index]\r\n            // set the type of the OscillatorNode\r\n            switch(type) {\r\n                case 1:\r\n                    selectedOscillatorNode.oscillatorNode.type = \"sine\"\r\n                    selectedOscillatorNode.type = \"sine\"\r\n                  break;\r\n                case 2:\r\n                    selectedOscillatorNode.oscillatorNode.type = \"sawtooth\"\r\n                    selectedOscillatorNode.type = \"sawtooth\"\r\n                  break;\r\n                case 3:\r\n                    selectedOscillatorNode.oscillatorNode.type = \"square\"\r\n                    selectedOscillatorNode.type = \"square\"\r\n                    break;\r\n                case 4:\r\n                    selectedOscillatorNode.oscillatorNode.type = \"triangle\"\r\n                    selectedOscillatorNode.type = \"triangle\"\r\n                    break;\r\n                default:\r\n                    selectedOscillatorNode.oscillatorNode.type = \"sine\"\r\n                    selectedOscillatorNode.type = \"sine\"\r\n                  // code block\r\n            }\r\n            oscillatorsCopy.push(selectedOscillatorNode)\r\n        }\r\n        setOscillatorNodes(oscillatorsCopy)\r\n    }\r\n\r\n    const checkType = () => {\r\n        switch(oscillatorNodes[0].type) {\r\n            case \"sine\":\r\n                return 1\r\n            case \"sawtooth\":\r\n                return 2\r\n            case \"square\":\r\n                return 3\r\n            case \"triangle\":\r\n                return 4\r\n            default:\r\n                return 1\r\n              // code block\r\n        }\r\n    }\r\n\r\n    if (oscillatorNodes === undefined || oscillatorNodes.length === 0) {\r\n        return null\r\n    }\r\n    else {\r\n        return (\r\n            <div className=\"oscillator-container\">\r\n                <h1 className={\"oscillator-title\"}>OSC {oscNum}</h1>\r\n\r\n                {/* Set the value of .frequency element to be the frequency of the selected oscillator\r\n            and add onChange handler to change the frequency of selectedOscillatorNode */}\r\n                <div className=\"oscillator-tune-container\">\r\n                    <h3>TUNE</h3>\r\n                    <Knob\r\n                        onChange={updateSelectedOscillatorTune}\r\n                        unlockDistance={10}\r\n                        min={-500}\r\n                        max={500}\r\n                        preciseMode={true}\r\n                        rotateDegrees={180}\r\n                        value={oscillatorNodes[0].detune} />\r\n                    <p>{Math.round(oscillatorNodes[0].detune)} cent</p>\r\n                </div>\r\n\r\n                {/* Set the value of .wave-type element to be the type of the selected oscillator\r\n            and add onChange handler to change the type of selectedOscillatorNode */}\r\n                <div className=\"oscillator-type-container\">\r\n                    <h3>TYPE</h3>\r\n                    <Knob\r\n                        onChange={updateSelectedOscillatorType}\r\n                        unlockDistance={10}\r\n                        preciseMode={true}\r\n                        min={1}\r\n                        max={5}\r\n                        rotateDegrees={180}\r\n                        value={checkType()} />\r\n                    <p>{oscillatorNodes[0].type}</p>\r\n                </div>\r\n\r\n                <div className=\"oscillator-vol-container\">\r\n                    <h3>MIX</h3>\r\n                    {/* Set the value of .oscillator-volume element to be the gain value of the selected oscillator's GainNode\r\n                and add onChange handler to change the gain of selectedOscillatorNode */}\r\n                    <Knob\r\n                        onChange={updateSelectedOscillatorVolume}\r\n                        unlockDistance={10}\r\n                        min={0}\r\n                        max={100}\r\n                        preciseMode={true}\r\n                        rotateDegrees={225}\r\n                        value={oscillatorNodes[0].gain} />\r\n                    <p>{Math.round(oscillatorNodes[0].gain)}</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\nexport default Oscillator;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './Oscillator.css';\r\nimport Audio from './Audio'\r\nimport { Knob } from \"react-rotary-knob\";\r\n\r\nconst Delay = () => {\r\n    const [delay, setDelay] = useState();\r\n    const [feedback, setFeedback] = useState();\r\n    const [filter, setFilter] = useState();\r\n    const [offOn, setOffOn] = useState(false)\r\n\r\n    // initialize masterGainNode on first render\r\n    useEffect(() => {\r\n        const initiateDelay = () => {\r\n            let delayNode = Audio.context.createDelay();\r\n            delayNode.delayTime.setValueAtTime(0.15, Audio.context.currentTime)\r\n    \r\n            let feedbackNode = Audio.context.createGain();\r\n            feedbackNode.gain.setValueAtTime(0.6, Audio.context.currentTime)\r\n    \r\n            let filterNode = Audio.context.createBiquadFilter();\r\n            filterNode.frequency.setValueAtTime(1000, Audio.context.currentTime)\r\n    \r\n            delayNode.connect(feedbackNode);\r\n            feedbackNode.connect(filterNode);\r\n            filterNode.connect(delayNode);\r\n    \r\n            Audio.masterGainNode.connect(delayNode);\r\n    \r\n            const delayNodeValues = {\r\n                delayTime: 0.15,\r\n                delayNode: delayNode,\r\n            }\r\n            const filterNodeValues = {\r\n                frequency: 1000,\r\n                filterNode: filterNode,\r\n            }\r\n            const feedbackNodeValues = {\r\n                gain: 0.60,\r\n                feedbackNode: feedbackNode,\r\n            }\r\n    \r\n            setDelay(delayNodeValues);\r\n            setFeedback(feedbackNodeValues)\r\n            setFilter(filterNodeValues)\r\n        }\r\n        initiateDelay()\r\n    }, [])\r\n\r\n    const updateDelayTime = (e) => {\r\n        let newDelay = {...delay};\r\n        newDelay.delayNode.delayTime.setValueAtTime(e, Audio.context.currentTime)\r\n        newDelay.delayTime = e;\r\n        //newDelay.delayTime.value = e;\r\n        setDelay(newDelay)\r\n    }\r\n\r\n    const updateDelayFeedback = (e) => {\r\n        let newFeedback = {...feedback};\r\n        newFeedback.gain = e;\r\n        newFeedback.feedbackNode.gain.setValueAtTime(e, Audio.context.currentTime)\r\n        setFeedback(newFeedback)\r\n    }\r\n\r\n    const updateDelayCutoffFreq = (e) => {\r\n        let newFilter = {...filter};\r\n        newFilter.frequency = e;\r\n        newFilter.filterNode.frequency.setValueAtTime(e, Audio.context.currentTime)\r\n        setFilter(newFilter)\r\n    }\r\n\r\n    const switchOnOffDelay=()=>{\r\n        if(offOn) {\r\n            setOffOn(false)\r\n            delay.delayNode.disconnect(Audio.context.destination);\r\n        }\r\n        else {\r\n            setOffOn(true)\r\n            delay.delayNode.connect(Audio.context.destination);\r\n        }\r\n    }\r\n\r\n    if(delay && filter && feedback) {\r\n        return (\r\n            <div className=\"oscillator-container\">\r\n                <h1 className=\"oscillator-title\">DELAY</h1>\r\n    \r\n                {/* Set the value of .frequency element to be the frequency of the selected oscillator\r\n                and add onChange handler to change the frequency of selectedOscillatorNode */}\r\n                <div className=\"oscillator-tune-container\">\r\n                    <h3>TIME</h3>\r\n                    <Knob\r\n                        onChange={updateDelayTime}\r\n                        unlockDistance={10}\r\n                        min={0}\r\n                        max={1}\r\n                        preciseMode={true}\r\n                        rotateDegrees={180}\r\n                        value={delay.delayTime} />\r\n                    <p>{(delay.delayTime).toFixed(2)}sec</p>\r\n                </div>\r\n    \r\n                {/* Set the value of .wave-type element to be the type of the selected oscillator\r\n                and add onChange handler to change the type of selectedOscillatorNode */}\r\n                <div className=\"oscillator-tune-container\">\r\n                    <h3>FEEDBACK</h3>\r\n                    <Knob\r\n                        onChange={updateDelayFeedback}\r\n                        unlockDistance={10}\r\n                        min={0}\r\n                        max={0.95}\r\n                        preciseMode={true}\r\n                        rotateDegrees={180}\r\n                        value={feedback.gain} />\r\n                    <p>{feedback.gain.toFixed(2)}</p>\r\n                </div>\r\n    \r\n                <div className=\"oscillator-vol-container\">\r\n                    <h3>CUTOFF</h3>\r\n                    {/* Set the value of .oscillator-volume element to be the gain value of the selected oscillator's GainNode\r\n                    and add onChange handler to change the gain of selectedOscillatorNode */}\r\n                    <Knob\r\n                        onChange={updateDelayCutoffFreq}\r\n                        unlockDistance={10}\r\n                        preciseMode={true}\r\n                        min={0}\r\n                        max={4000}\r\n                        rotateDegrees={180}\r\n                        value={filter.frequency} />\r\n                    <p>{Math.round(filter.frequency)}hz</p>\r\n                </div>\r\n                <h3 onClick={switchOnOffDelay}>{offOn? \"Turn Off\" : \"Turn On\"}</h3>\r\n            </div>\r\n        );\r\n    } else { \r\n        return null\r\n    }\r\n\r\n}\r\nexport default Delay;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './Oscillator.css';\r\nimport Audio from './Audio'\r\nimport { Knob } from \"react-rotary-knob\";\r\n\r\nconst Filter = () => {\r\n    const [filter, setFilter] = useState();\r\n\r\n    // initialize masterGainNode on first render\r\n    useEffect(() => {\r\n        const initiateFilter = () => {\r\n            let filterNode = Audio.context.createBiquadFilter();\r\n            filterNode.frequency.value = 1000;\r\n            filterNode.type = \"lowpass\";\r\n            filterNode.Q.value = 1;\r\n            Audio.masterGainNode.connect(filterNode);\r\n            filterNode.connect(Audio.context.destination);\r\n\r\n            const filterNodeValues = {\r\n                frequency: filterNode.frequency.value,\r\n                type: filterNode.type,\r\n                Q: filterNode.Q.value,\r\n                filterNode: filterNode,\r\n            }\r\n            setFilter(filterNodeValues);\r\n        }\r\n        initiateFilter()\r\n    }, [])\r\n\r\n    const updateFrequency = (e) => {\r\n        let newFreq = {...filter};\r\n        newFreq.filterNode.frequency.value = e;\r\n        newFreq.frequency = e;\r\n        //newDelay.delayTime.value = e;\r\n        setFilter(newFreq)\r\n    }\r\n\r\n    const updateQ = (e) => {\r\n        console.log(filter)\r\n        let newFreq = {...filter};\r\n        newFreq.filterNode.Q.value = e;\r\n        newFreq.Q = e;\r\n        //newDelay.delayTime.value = e;\r\n        setFilter(newFreq)\r\n    }\r\n\r\n    const updateType = (e) => {\r\n        let select = Math.round(e)\r\n        let newFreq = {...filter};\r\n        switch(select) {\r\n            case 1:\r\n                newFreq.filterNode.type = \"lowpass\";\r\n                newFreq.type = \"lowpass\";\r\n              break;\r\n            case 2:\r\n                newFreq.filterNode.type = \"highpass\";\r\n                newFreq.type = \"highpass\";\r\n              break;\r\n            case 3:\r\n                newFreq.filterNode.type = \"bandpass\";\r\n                newFreq.type = \"bandpass\";\r\n                break;\r\n            default:\r\n                newFreq.filterNode.type = \"lowpass\";\r\n                newFreq.type = \"lowpass\";\r\n              // code block\r\n        }\r\n        setFilter(newFreq)\r\n    }\r\n\r\n    const checkType = () => {\r\n        switch(filter.type) {\r\n            case \"lowpass\":\r\n                return 1\r\n            case \"highpass\":\r\n                return 2\r\n            case \"bandpass\":\r\n                return 3\r\n            default:\r\n                return 1\r\n              // code block\r\n        }\r\n    }\r\n\r\n    if(filter===undefined)\r\n    {\r\n        return null\r\n    }\r\n    else {\r\n        return (\r\n            <div className=\"oscillator-container\">\r\n                <h1 className=\"oscillator-title\">FILTER</h1>\r\n    \r\n                {/* Set the value of .frequency element to be the frequency of the selected oscillator\r\n                and add onChange handler to change the frequency of selectedOscillatorNode */}\r\n                <div className=\"oscillator-tune-container\">\r\n                    <h3>CUTOFF</h3>\r\n                    <Knob\r\n                        onChange={updateFrequency}\r\n                        unlockDistance={10}\r\n                        min={0}\r\n                        max={4000}\r\n                        preciseMode={true}\r\n                        rotateDegrees={180}\r\n                        value={filter.frequency} />\r\n                    <p>{Math.round(filter.frequency)}hz</p>\r\n                </div>\r\n    \r\n                {/* Set the value of .wave-type element to be the type of the selected oscillator\r\n                and add onChange handler to change the type of selectedOscillatorNode */}\r\n                <div className=\"oscillator-tune-container\">\r\n                    <h3>RES</h3>\r\n                    <Knob\r\n                        onChange={updateQ}\r\n                        unlockDistance={10}\r\n                        min={0.01}\r\n                        max={15}\r\n                        preciseMode={true}\r\n                        rotateDegrees={180}\r\n                        value={filter.Q} />\r\n                    <p>{(filter.Q).toFixed(2)}</p>\r\n                </div>\r\n    \r\n                <div className=\"oscillator-vol-container\">\r\n                    <h3>TYPE</h3>\r\n                    {/* Set the value of .oscillator-volume element to be the gain value of the selected oscillator's GainNode\r\n                    and add onChange handler to change the gain of selectedOscillatorNode */}\r\n                    <Knob\r\n                        onChange={updateType}\r\n                        unlockDistance={10}\r\n                        preciseMode={true}\r\n                        min={1}\r\n                        max={4}\r\n                        rotateDegrees={180}\r\n                        value={checkType()} />\r\n                    <p>{filter.type}</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\nexport default Filter;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './Oscillator.css';\r\nimport Audio from './Audio'\r\nimport { Knob } from \"react-rotary-knob\";\r\n\r\nconst Reverb = () => {\r\n    var Reverb = require('soundbank-reverb')\r\n    const [reverb, setReverb] = useState();\r\n    const [offOn, setOffOn] = useState(false)\r\n\r\n    // initialize masterGainNode on first render\r\n    useEffect(() => {\r\n        const initiateReverb = () => \r\n            {\r\n            let reverbNode = Reverb(Audio.context);\r\n            reverbNode.time = 5 //seconds\r\n            reverbNode.wet.value = 0.8\r\n            reverbNode.dry.value = 1\r\n\r\n            reverbNode.filterType = 'lowpass'\r\n            reverbNode.cutoff.value = 4000 //Hz\r\n            //reverbNode.connect(Audio.masterGainNode);\r\n            Audio.masterGainNode.connect(reverbNode);\r\n            // reverbNode.connect(Audio.context.destination)\r\n\r\n            const reverbValues = {\r\n                decay: 5,\r\n                wet: 0.8,\r\n                dry: 1,\r\n                reverbNode: reverbNode\r\n            }\r\n            setReverb(reverbValues);\r\n        }\r\n        initiateReverb()\r\n    }, [])\r\n\r\n    const updateWet = (e) => {\r\n        let newAmount = {...reverb};\r\n        newAmount.reverbNode.wet.value = e;\r\n        newAmount.wet = e;\r\n        setReverb(newAmount)\r\n    }\r\n\r\n    const updateDry = (e) => {\r\n        let newAmount = {...reverb};\r\n        newAmount.reverbNode.dry.value = e;\r\n        newAmount.dry = e;\r\n        setReverb(newAmount)\r\n    }\r\n\r\n    const updateDecay = (e) => {\r\n        let newAmount = {...reverb};\r\n        newAmount.reverbNode.time = e;\r\n        newAmount.decay = e;\r\n        setReverb(newAmount)\r\n    }\r\n\r\n    const switchOnOffReverb=()=>{\r\n        if(offOn) {\r\n            setOffOn(false)\r\n            reverb.reverbNode.disconnect(Audio.context.destination);\r\n        }\r\n        else {\r\n            setOffOn(true)\r\n            reverb.reverbNode.connect(Audio.context.destination);\r\n        }\r\n    }\r\n\r\n    if(reverb===undefined)\r\n    {\r\n        return null\r\n    }\r\n    else {\r\n        return (\r\n            <div className=\"oscillator-container\">\r\n                <h1 className=\"oscillator-title\">REVERB</h1>\r\n    \r\n                {/* Set the value of .frequency element to be the frequency of the selected oscillator\r\n                and add onChange handler to change the frequency of selectedOscillatorNode */}\r\n                <div className=\"oscillator-tune-container\">\r\n                    <h3>DECAY</h3>\r\n                    <Knob\r\n                        onChange={updateDecay}\r\n                        unlockDistance={10}\r\n                        min={0}\r\n                        max={10}\r\n                        preciseMode={true}\r\n                        rotateDegrees={220}\r\n                        value={reverb.decay} />\r\n                    <p>{Math.round(reverb.decay)}sec</p>\r\n                </div>\r\n    \r\n                {/* Set the value of .wave-type element to be the type of the selected oscillator\r\n                and add onChange handler to change the type of selectedOscillatorNode */}\r\n                <div className=\"oscillator-tune-container\">\r\n                    <h3>WET</h3>\r\n                    <Knob\r\n                        onChange={updateWet}\r\n                        unlockDistance={10}\r\n                        min={0}\r\n                        max={1}\r\n                        preciseMode={true}\r\n                        rotateDegrees={220}\r\n                        value={reverb.wet} />\r\n                    <p>{reverb.wet.toFixed(2)}</p>\r\n                </div>\r\n    \r\n                <div className=\"oscillator-vol-container\">\r\n                    <h3>DRY</h3>\r\n                    {/* Set the value of .oscillator-volume element to be the gain value of the selected oscillator's GainNode\r\n                    and add onChange handler to change the gain of selectedOscillatorNode */}\r\n                    <Knob\r\n                        onChange={updateDry}\r\n                        unlockDistance={10}\r\n                        preciseMode={true}\r\n                        min={0}\r\n                        max={1}\r\n                        rotateDegrees={220}\r\n                        value={reverb.dry} />\r\n                    <p>{(reverb.dry).toFixed(2)}</p>\r\n                </div>\r\n                <h3 onClick={switchOnOffReverb}>{offOn? \"Turn Off\" : \"Turn On\"}</h3>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\nexport default Reverb;\r\n","import React, { useState} from 'react';\r\nimport './App.css';\r\nimport Audio from './components/Audio'\r\nimport Oscillator from './components/Oscillator'\r\nimport Delay from './components/Delay'\r\nimport Filter from './components/Filter'\r\nimport Reverb from './components/Reverb'\r\nimport { Knob } from \"react-rotary-knob\";\r\nimport { Piano, KeyboardShortcuts, MidiNumbers } from 'react-piano';\r\nimport 'react-piano/dist/styles.css';\r\nimport './CustomPianoStyles.css';  // import a set of overrides\r\n\r\nconst App = () => {\r\n    const [start, setStart] = useState(false)\r\n    const firstNote = MidiNumbers.fromNote('c4');\r\n    const lastNote = MidiNumbers.fromNote('c5');\r\n    const keyboardShortcuts = KeyboardShortcuts.create({\r\n        firstNote: firstNote,\r\n        lastNote: lastNote,\r\n        keyboardConfig: KeyboardShortcuts.HOME_ROW,\r\n    });\r\n\r\n    // [midiNumber, frequency]\r\n    const noteFrequencies = new Map([\r\n        [60, 262], [61, 277.2], [62, 293.7],\r\n        [63, 311.2], [64, 329.7], [65, 349.3],\r\n        [66, 370.1], [67, 392.1], [68, 415.4],\r\n        [69, 440], [70, 466.1], [71, 493.8],\r\n        [72, 523.2]\r\n    ]);\r\n\r\n    // set state to represent initial value of masterGainNode\r\n    const [masterGainValue, setMasterGainValue] = useState(0.5)\r\n    const [playNote, setPlayNote] = useState({ playNote: null, stopNote: null })\r\n\r\n    const initializeMasterGain = () => {\r\n        setStart(true)\r\n        // Connect the masterGainNode to the audio context to allow it to output sound.\r\n        Audio.masterGainNode.connect(Audio.context.destination)\r\n\r\n        // Set masterGain Value to 0\r\n        Audio.masterGainNode.gain.setValueAtTime(0.2, Audio.context.currentTime)\r\n    }\r\n\r\n    // // initialize masterGainNode on first render\r\n    // useEffect(() => {\r\n    //     initializeMasterGain()\r\n    // }, [])\r\n\r\n    function PianoRoll() {\r\n        return (\r\n        <div className=\"piano-container\">\r\n            <Piano\r\n                noteRange={{ first: firstNote, last: lastNote }}\r\n                playNote={(midiNumber) => {\r\n                    onKeyDown(midiNumber);\r\n                }}\r\n                stopNote={(midiNumber) => {\r\n                    setPlayNote({ stopNote: midiNumber, playNote: null })\r\n                }}\r\n                keyboardShortcuts={keyboardShortcuts}\r\n            />\r\n        </div>)\r\n    }\r\n\r\n    const changeMasterVolume = (e) => {\r\n        setMasterGainValue(Math.round(e) / 100)\r\n        Audio.masterGainNode.gain.setValueAtTime(Math.round(e) / 100, Audio.context.currentTime)\r\n    }\r\n\r\n    function onKeyDown(midiNumber) {\r\n        setPlayNote({ playNote: midiNumber, frequency: noteFrequencies.get(midiNumber), stopNote: null })\r\n    }\r\n\r\n    function MasterVolume() {\r\n        return (\r\n            <div className=\"master-volume-container\">\r\n            <h1 className=\"oscillator-title\">MASTER VOL</h1>\r\n            <Knob\r\n                onChange={changeMasterVolume}\r\n                unlockDistance={10}\r\n                preciseMode={true}\r\n                min={0}\r\n                max={100}\r\n                rotateDegrees={225}\r\n                value={masterGainValue * 100} />\r\n            <p>{Math.round(masterGainValue * 100)}</p>\r\n        </div>\r\n        )\r\n    }\r\n\r\n\r\n    if(start===false)\r\n    {\r\n        return (        \r\n        <div className=\"App\">\r\n            <div className=\"splash-screen\">\r\n                <h1>Moms.On.My.Synth</h1>\r\n                <p onClick={()=>initializeMasterGain()}>Click here to start</p>\r\n            </div>\r\n        </div>);\r\n    }\r\n    else {\r\n        return (\r\n            <div className=\"App\">\r\n                <div className=\"top-row\">\r\n                    <Oscillator oscNum={1} play={playNote} />\r\n                    <Oscillator oscNum={2} play={playNote} />\r\n                    <Oscillator oscNum={3} play={playNote} />\r\n                    <Filter />\r\n                    <Delay />\r\n                    <Reverb />\r\n                    {MasterVolume()}\r\n                </div>\r\n                <div className=\"bottom-row\">\r\n                    {PianoRoll()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}